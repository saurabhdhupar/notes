; 平面库

(load "lib/math.scm")

; 点
(define (make-point x y) (cons x y))
(define (x-point point) (car point))
(define (y-point point) (cdr point))
(define (eq?point p1 p2) (and (= (x-point p1) (x-point p2)) (= (y-point p1) (y-point p2))))
(define (print-point point)
    (newline)
    (display "(")
    (display (x-point point))
    (display ",")
    (display (y-point point))
    (display ")"))

; 线段
(define (make-segment x y) (cons x y))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))
(define (eq?segment seg1 seg2)
    (and (eq?point (start-segment seg1) (start-segment seg2))
         (eq?point (end-segment seg1) (end-segment seg2))))
(define (length-segment seg)
    (let ((start (start-segment seg))
          (end (end-segment seg)))
        (let ((x1 (x-point start))
              (x2 (x-point end))
              (y1 (y-point start))
              (y2 (y-point end)))
            (let ((dx (- x1 x2))
                  (dy (- y1 y2)))
                (sqrt (sum-of-squqre dx dy))))))
(define (midpoint-segment seg)
    (let ((start (start-segment seg))
          (end (end-segment seg)))
        (let ((x1 (x-point start))
              (x2 (x-point end))
              (y1 (y-point start))
              (y2 (y-point end)))
            (let ((x (average x1 x2))
                  (y (average y1 y2)))
                (make-segment x y)))))

; 矩形
(define (make-rectangle length-seg width-seg)
    (cons length-seg width-seg))
(define (get-length-rec rec)
    ())
(define (get-width-rec rec)
    ())
(define (perimeter-rec rec)
    (let ((l (get-length-rec rec))
          (w (get-width-rec rec)))
        (+ l l w w)))
(define (area-rec rec)
    (let ((l (get-length-rec rec))
          (w (get-width-rec rec)))
        (* l w)))

(define flat_load! #t)